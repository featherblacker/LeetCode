###题干
####4.寻找两个有序数组的中位数
给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。

示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5

###代码
####解法一
最简单的合并排序法, 时间复杂度应为 O((m+n)log(m+n))

```python
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        m = nums1 + nums2
        m.sort()
        if len(m) % 2 == 0:
            return (m[len(m) // 2 - 1] + m[len(m) // 2]) / 2.0
        else:
            return m[len(m) // 2]
```

####解法二
双指针法, 只需排序到总长度的一半即可, 时间复杂度应为O(m+n)
```python
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        num = len(nums1) + len(nums2)
        if len(nums1) == 0:
            if num % 2 == 0:
                return (nums2[len(nums2) // 2] + nums2[len(nums2) // 2 - 1]) / 2.0
            else:
                return nums2[len(nums2) // 2]
        if len(nums2) == 0:
            if num % 2 == 0:
                return (nums1[len(nums1) // 2] + nums1[len(nums1) // 2 - 1]) / 2.0
            else:
                return nums1[len(nums1) // 2]
        lst = []
        i = j = 0
        count = 0
        while count <= num // 2:
            if nums1[i] > nums2[j]:
                lst.append(nums2[j])
                j += 1
                if j == len(nums2):
                    count += 1
                    break
            else:
                lst.append(nums1[i])
                i += 1
                if i == len(nums1):
                    count += 1
                    break
            count += 1

        if i == len(nums1):
            while count <= num // 2:
                lst.append(nums2[j])
                j += 1
                count += 1

        elif j == len(nums2):
            while count <= num // 2:
                lst.append(nums1[i])
                i += 1
                count += 1
        if num % 2 == 0:
            return (lst[num // 2] + lst[num // 2 - 1]) / 2.0
        else:
            return lst[num // 2]
```

####解法三
依然是双指针, 速度更快
```python
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        length = len(nums1)+len(nums2)
        aStart = bStart = 0
        left = right = 0
        for _ in range(length//2+1):
            left = right
            if aStart < len(nums1) and (bStart >= len(nums2) or nums1[aStart] < nums2[bStart]):
                right = nums1[aStart]
                aStart+=1
            else:
                right = nums2[bStart]
                bStart+=1
        if length %2 == 0:
            return (right+left)/2.0
        else:
            return right
```

###解法四
利用找出第 K 个最小值的概念解决问题

```python
class Solution2(object):
        def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """

        n = len(nums1)
        m = len(nums2)
        left = (n + m + 1) // 2
        right = (n + m + 2) // 2
        return (self.getKth(nums1, 0, n - 1, nums2, 0, m - 1, left) + self.getKth(nums1, 0, n - 1, nums2, 0, m - 1,
                                                                                  right)) / 2.0

    def getKth(self, nums1, start1, end1, nums2, start2, end2, k):
        """

        :param nums1: 第一个 list
        :param start1: 第一个 list 的起始计算点
        :param end1: 第一个 list 的终结计算点
        :param nums2: 第二个 list
        :param start2: 第二个 list 的起始计算点
        :param end2:第二个 list 的终结计算点
        :param k: 离 start 的距离
        :return: 中位数值
        """
        len1 = end1 - start1 + 1
        len2 = end2 - start2 + 1
        # 最小的 list 放到前面
        if (len1 > len2):
            return self.getKth(nums2, start2, end2, nums1, start1, end1, k)
        # 如果 list 为空直接找第二个 list 的中间值
        if len1 == 0:
            return nums2[start2 + k - 1]
        # 找到最后直接比对第一个值的大小
        if k == 1:
            return min(nums1[start1], nums2[start2])

        i = start1 + min(len1, k / 2) - 1
        j = start2 + min(len2, k / 2) - 1
        # 较小的那一组 list 向后顺延 k/2
        if (nums1[i] > nums2[j]):
            return self.getKth(nums1, start1, end1, nums2, j + 1, end2, k - (j - start2 + 1))
        else:
            return self.getKth(nums1, i + 1, end1, nums2, start2, end2, k - (i - start1 + 1))
```